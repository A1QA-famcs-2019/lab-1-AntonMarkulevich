import org.testng.Assert;
import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;
import java.io.ByteArrayOutputStream;
import java.io.PrintStream;

public class PenTest {
    @DataProvider(name = "pens")
    public Object[][] getPens() {
        return new Object[][] {
                {100, 1, "BLUE"},
                {1000, 2, "RED"},
                {50, 4, "GREEN"},
                {5, 0.1, "BLACK"}

        };
    }
    @Test(dataProvider = "pens")
    void constructorOfPens(Integer ContainerValue, double size,  String color){
        try {
            new Pen(ContainerValue);
            new Pen(ContainerValue, size);
            new Pen(ContainerValue, size, color);
        }
        catch (Exception e) {
            Assert.fail("Constructor shouldn't throw exception on valid parameters");
        }
    }

    @Test(dataProvider = "pens")
    void getColorTest(Integer ContainerValue, double size,  String color) {
        Pen pen = new Pen(ContainerValue, size, color);
        Assert.assertEquals(color, pen.getColor(),"The initial color does not match the received");
    }

    @DataProvider(name = "invalidParameters")
    public Object[][] getInvalidPens() {
        return new Object[][] {
                {-1, 1, "BLUE"},
                {5, -1, "RED"},
                {-1, -1, "GREEN"},
                {1, 1, ""},
                {-1, 1, null},
                {-1, -1, null}

        };
    }

//    @Test(dataProvider = "invalidParameters")
//    void invalidConstructor(Integer ContainerValue, double size,  String color) {
//        Assert.expectThrows(Exception.class, () -> new Pen(ContainerValue, size, color));
//    }
    @DataProvider(name = "writeMethodArgs")
    Object[][] getWriteMethodArgs()
    {
        return new Object[][]{
                {0, 1, "abcd", ""},
                {100, 1, "abcd", "abcd"},
                {5, 4, "123456", "1234"},
                {5, 10, "h", ""}
        };
    }
    @Test(dataProvider = "writeMethodArgs")
    void writePositiveTest(int container, double size, String word, String expected)
    {
        final Pen pen = new Pen(container, size, "RED");
        Assert.assertEquals(pen.write(word), expected);
    }
//    @Test
//    void doSomethingElseTest()
//    {
//        // Redirect stdout
//        PrintStream stdOut = System.out;
//        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
//        System.setOut(new PrintStream(outputStream));
//
//        // test
//        final String color = "RED";
//        new Pen(100, 0.3, color).doSomethingElse();
//        Assert.assertEquals(color + System.lineSeparator(), outputStream.toString(), "Written value should be equal to color and be followed by system dependent line separator.");
//
//        // restore stdout
//        System.setOut(stdOut);
//    }
}
